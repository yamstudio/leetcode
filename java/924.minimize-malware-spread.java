/*
 * @lc app=leetcode id=924 lang=java
 *
 * [924] Minimize Malware Spread
 */

// @lc code=start
class Solution {

    private static int findRoot(int[] roots, int x) {
        return roots[x] == x ? x : (roots[x] = findRoot(roots, roots[x]));
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length, ret = -1, m = 0;
        int[] roots = new int[n], area = new int[n], count = new int[n];
        Set<Integer> bad = new HashSet<Integer>();
        Arrays.sort(initial);
        for (int x : initial) {
            bad.add(x);
        }
        for (int i = 0; i < n; ++i) {
            roots[i] = i;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j] == 1) {
                    roots[findRoot(roots, i)] = findRoot(roots, j);
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            int r = findRoot(roots, i);
            ++area[r];
            if (bad.contains(i)) {
                ++count[r];
            }
        }
        for (int b : initial) {
            int r = findRoot(roots, b);
            if (count[r] == 1) {
                if (area[r] > m) {
                    ret = b;
                    m = area[r];
                }
            } else if (ret < 0) {
                ret = b;
            }
        }
        return ret;
    }
}
// @lc code=end

