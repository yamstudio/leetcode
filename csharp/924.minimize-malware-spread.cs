/*
 * @lc app=leetcode id=924 lang=csharp
 *
 * [924] Minimize Malware Spread
 */

using System.Collections.Generic;
using System.Linq;

// @lc code=start
public class Solution {
    
    private static int FindRoot(int[] roots, int curr) {
        return roots[curr] == curr ? curr : FindRoot(roots, roots[curr]);
    }
    
    public int MinMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.Length, minSpread = 0, ret = -1;
        int[] roots = Enumerable.Range(0, n).ToArray(), area = new int[n], count = new int[n];
        var bad = new HashSet<int>(initial);
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j] == 1) {
                    roots[FindRoot(roots, i)] = FindRoot(roots, j);
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            int root = FindRoot(roots, i);
            ++area[root];
            if (bad.Contains(i)) {
                ++count[root];
            }
        }
        foreach (int x in bad.OrderBy(b => b)) {
            int root = FindRoot(roots, x);
            if (count[root] == 1) {
                if (area[root] > minSpread) {
                    minSpread = area[root];
                    ret = x;
                }
            } else if (ret == -1) {
                ret = x;
            }
        }
        return ret;
    }
}
// @lc code=end

